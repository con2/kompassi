import re
from base64 import urlsafe_b64encode
from os import urandom
from os.path import splitext


def generate_unique_id():
    buffer = urandom(8)
    return urlsafe_b64encode(buffer).decode("utf-8").rstrip("=")


GARBLE_RE = re.compile(r"(.+)\.([:alnum:]{8,16})\.(.+?)")


def extract_garble(filename: str) -> tuple[str, str, str] | None:
    """
    If this is a filename generated by our file upload processor in the format of
    stem.garble.ext, return (stem.garble.ext).
    """
    if match := GARBLE_RE.match(filename):
        return match.group(1), match.group(2), match.group(3)
    return None


def truncate_filename(filename: str, max_len: int = 255) -> str:
    if len(filename) <= max_len:
        return filename

    if extracted := extract_garble(filename):
        stem, garble, ext = extracted
    else:
        stem, ext = splitext(filename)
        garble = generate_unique_id()

    preserve_chars = max_len - len(garble) - len(ext) - 1
    return f"{stem[:preserve_chars]}.{garble}{ext}"
